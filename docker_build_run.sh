#!/bin/bash
# Usage: ./docker_build_run.sh <franchise_name> <port> <jar_file> [profile] [network_name] [site_type]

set -e

#-----------------------------
# Args & Defaults
#-----------------------------
if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ] || [ -z "$5" ] || [ -z "$6" ] || [ -z "$7" ]; then
  echo "Usage: $0 <franchise_name> <port> <jar_file> <profile> <network_name> <site_type> <domain>"
  exit 1
fi

APP_NAME="$1"
PORT="$2"
JAR_FILE="$3"
PROFILE="${4:-prod}"
NETWORK="${5:-bridge}"
SITE_TYPE="${6:-store}"
DOMAIN="${7}" # ÎèÑÎ©îÏù∏ÏùÄ store ÌÉÄÏûÖÏùº ÎïåÎßå ÏùòÎØ∏Í∞Ä ÏûàÏßÄÎßå, ÏùºÍ¥ÄÏÑ±ÏùÑ ÏúÑÌï¥ Ìï≠ÏÉÅ Î∞õÏäµÎãàÎã§.
DATE=$(date '+%Y-%m-%d %H:%M:%S')

echo "üåê Docker ÎÑ§Ìä∏ÏõåÌÅ¨: $NETWORK"
echo "üè∑  SITE_TYPE: $SITE_TYPE"

#-----------------------------
# Where am I?
#-----------------------------
SCRIPT_DIR=$(
  cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd
)

IN_DOCKER=false
if [ -f /.dockerenv ] || grep -q 'docker' /proc/1/cgroup 2>/dev/null; then
  IN_DOCKER=true
fi

#-----------------------------
# Base Paths (ADMIN_BASE vs HOST_BASE)
#  - ADMIN_BASE: ÌòÑÏû¨ ÌîÑÎ°úÏÑ∏Ïä§(admin Ïª®ÌÖåÏù¥ÎÑà ÎòêÎäî Ìò∏Ïä§Ìä∏)ÏóêÏÑú Î≥¥Ïù¥Îäî Í≤ΩÎ°ú
#  - HOST_BASE : docker Îç∞Î™¨Ïù¥ Î∞îÎùºÎ≥¥Îäî Ìò∏Ïä§Ìä∏ Í≤ΩÎ°ú( -v Ï¢åÏ∏° )
#-----------------------------
if $IN_DOCKER; then
  # admin Ïª®ÌÖåÏù¥ÎÑà ÎÇ¥Î∂Ä
  ADMIN_BASE="/app"
  HOST_BASE="${HOST_PROJECT_PATH:-/home/ubuntu/blissworld}"   # composeÏóêÏÑú Ï£ºÏûÖÎê®
else
  # Ìò∏Ïä§Ìä∏ÏóêÏÑú ÏßÅÏ†ë Ïã§Ìñâ
  ADMIN_BASE="$(cd "$SCRIPT_DIR/.." && pwd)"
  HOST_BASE="$ADMIN_BASE"
fi

## WWW base paths (store ÌÉÄÏûÖ Ï†ÑÏö©)
WWW_BASE_ADMIN="$ADMIN_BASE/www"
WWW_BASE_HOST="$HOST_BASE/www"

# Admin(ÌòÑÏû¨ ÌîÑÎ°úÏÑ∏Ïä§)ÏóêÏÑú Ï†ëÍ∑ºÌï† Í≤ΩÎ°ú (Ï°¥Ïû¨ ÌôïÏù∏/Î≥µÏÇ¨/Î°úÍ∑∏ Í∏∞Î°ù Îì±)
APP_DIR_ADMIN="$ADMIN_BASE/apps/$APP_NAME"
LOG_DIR_ADMIN="$ADMIN_BASE/logs"
KEY_FILE_ADMIN="$ADMIN_BASE/keys/blissworld-firebase-key.json"
WWW_DIR_ADMIN="$WWW_BASE_ADMIN/$DOMAIN" # [ÏàòÏ†ï] www Í≤ΩÎ°úÎäî Ïù¥Ï†ú domainÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Ìï©ÎãàÎã§.

# docker run -v ÏÜåÏä§Î°ú ÏÇ¨Ïö©Ìï† Ìò∏Ïä§Ìä∏ Í≤ΩÎ°ú
APP_DIR_HOST="$HOST_BASE/apps/$APP_NAME"
LOG_DIR_HOST="$HOST_BASE/logs"
KEY_FILE_HOST="$HOST_BASE/keys/blissworld-firebase-key.json"
WWW_DIR_HOST="$WWW_BASE_HOST/$DOMAIN" # [ÏàòÏ†ï] www Í≤ΩÎ°úÎäî Ïù¥Ï†ú domainÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Ìï©ÎãàÎã§.

# Í≥µÏö© Í≤ΩÎ°ú/ÌååÏùº
JAR_PATH="$APP_DIR_ADMIN/$JAR_FILE"
LOG_FILE="$LOG_DIR_ADMIN/docker_build.log"
DOCKERFILE_NAME="Dockerfile.store"

# ÎîîÎ†âÌÜ†Î¶¨ Ï§ÄÎπÑ (admin Ï∏°ÏóêÏÑú ÏÉùÏÑ±ÌïòÎ©¥ Ìò∏Ïä§Ìä∏ÏóêÎèÑ Î∞òÏòÅÎê®)
mkdir -p "$LOG_DIR_ADMIN" "$APP_DIR_ADMIN"
mkdir -p "$LOG_DIR_ADMIN/$APP_NAME"

chown 1001:1001 "$LOG_DIR_ADMIN" "$LOG_DIR_ADMIN/$APP_NAME"


#-----------------------------
# Sanity Checks
#-----------------------------
if [ ! -f "$SCRIPT_DIR/$DOCKERFILE_NAME" ]; then
  echo "[ERROR] Dockerfile not found: $SCRIPT_DIR/$DOCKERFILE_NAME" | tee -a "$LOG_FILE"
  exit 1
fi

if [ ! -f "$JAR_PATH" ]; then
  echo "[ERROR] JAR file not found: $JAR_PATH" | tee -a "$LOG_FILE"
  exit 1
fi

# Firebase ÌÇ§Îäî store ÌÉÄÏûÖÏóêÏÑúÎßå ÌïÑÏàò
if [ "$SITE_TYPE" = "store" ]; then
  if [ ! -f "$KEY_FILE_ADMIN" ]; then
    echo "‚ùå [ERROR] Firebase key file does not exist: $KEY_FILE_ADMIN" | tee -a "$LOG_FILE"
    exit 1
  fi

  # [ÏàòÏ†ï] store ÌÉÄÏûÖÏù¥Î©¥ www ÎîîÎ†âÌÑ∞Î¶¨Î•º Ï§ÄÎπÑÌï©ÎãàÎã§.
  # Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî setup_franchise_site.sh Î≥¥Îã§ Î®ºÏ†Ä Ïã§ÌñâÎêòÎØÄÎ°ú, www ÎîîÎ†âÌÑ∞Î¶¨Ïùò Ï°¥Ïû¨Î•º ÏßÅÏ†ë Î≥¥Ïû•Ìï¥Ïïº Ìï©ÎãàÎã§.
  if [ ! -d "$WWW_DIR_ADMIN" ]; then
    echo "[INFO] www ÎîîÎ†âÌÑ∞Î¶¨ ÏÉùÏÑ±: $WWW_DIR_ADMIN" | tee -a "$LOG_FILE"
    mkdir -p "$WWW_DIR_ADMIN" || { echo "[ERROR] $WWW_DIR_ADMIN ÏÉùÏÑ± Ïã§Ìå®"; exit 1; }
  fi
fi

#-----------------------------
# Workdir for docker build
#-----------------------------
WORK_DIR=$(mktemp -d)
trap 'rm -rf -- "$WORK_DIR"' EXIT
cp "$JAR_PATH" "$WORK_DIR/app.jar"

#-----------------------------
# Build Image
#-----------------------------
echo "üê≥ Building Docker image for $APP_NAME using $DOCKERFILE_NAME..."
docker build \
  --label "original.jar.file=$JAR_FILE" \
  -t "$APP_NAME-app" \
  -f "$SCRIPT_DIR/$DOCKERFILE_NAME" \
  "$WORK_DIR" >> "$LOG_FILE" 2>&1 &

BUILD_PID=$!
spin_chars=("‚†á" "‚†è" "‚†ã" "‚†ô" "‚†∏" "‚†¥" "‚†¶" "‚†ß")
echo -n "   Building... "
while ps -p "$BUILD_PID" > /dev/null; do
  for i in "${spin_chars[@]}"; do
    echo -ne "\033[0;36m${i}\033[0m"
    sleep 0.1
    echo -ne "\b"
  done
done
wait $BUILD_PID
BUILD_STATUS=$?

if [ $BUILD_STATUS -ne 0 ]; then
  echo -e "\r\033[K[$DATE] [ERROR] Build failed for $APP_NAME. See $LOG_FILE" | tee -a "$LOG_FILE"
  exit 1
else
  echo -e "\r\033[K‚úÖ Image built successfully for $APP_NAME."
fi

#-----------------------------
# Deduplicate / Port check
#-----------------------------
if docker ps --format '{{.Names}}' | grep -q "^${APP_NAME}$"; then
  echo "‚ö†Ô∏è  [WARNING] Ïª®ÌÖåÏù¥ÎÑà '$APP_NAME' Ïù¥ Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§. Ï†úÍ±∞ ÌõÑ Ïû¨Ïã§ÌñâÌï©ÎãàÎã§."
  docker rm -f "$APP_NAME" >> "$LOG_FILE" 2>&1 || true
fi

if docker ps --format '{{.Names}} {{.Ports}}' | grep -q ":$PORT->8080"; then
  echo "‚ùå [ERROR] Ìè¨Ìä∏ $PORT Î•º Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ Ïª®ÌÖåÏù¥ÎÑàÍ∞Ä ÏûàÏäµÎãàÎã§."
  echo "üõë Ïä§ÌÅ¨Î¶ΩÌä∏Î•º Ï§ëÎã®Ìï©ÎãàÎã§. Ï∂©ÎèåÏùÑ Ìï¥Í≤∞Ìïú ÌõÑ Îã§Ïãú Ïã§ÌñâÌïòÏã≠ÏãúÏò§."
  exit 1
fi

#-----------------------------
# Run Container
#  -v Ï¢åÏ∏°ÏùÄ Î∞òÎìúÏãú HOST Í≤ΩÎ°úÎ•º ÏÇ¨Ïö©
#-----------------------------
DOCKER_RUN_ARGS=(
  -d
  --restart unless-stopped
  --name "$APP_NAME"
  --network "$NETWORK"
  -p "$PORT:8080"
  -e "SPRING_PROFILES_ACTIVE=$PROFILE"
  -e "GLOBAL_START_STATE=setup"
  --memory="256m"
  --cpus="0.5"
  -v "$LOG_DIR_HOST/$APP_NAME":/app/logs
  --label "site.type=$SITE_TYPE"
  --label "site.domain=$DOMAIN" # [Ï∂îÍ∞Ä] Ïª®ÌÖåÏù¥ÎÑàÏóê ÎèÑÎ©îÏù∏ ÎùºÎ≤®ÏùÑ Ï∂îÍ∞ÄÌïòÏó¨, ÏóÖÎç∞Ïù¥Ìä∏ Ïãú www Í≤ΩÎ°úÎ•º ÏãùÎ≥ÑÌï† Ïàò ÏûàÎèÑÎ°ù Ìï©ÎãàÎã§.
)

# store ÌÉÄÏûÖÎßå ÌÇ§ ÎßàÏö¥Ìä∏
if [ "$SITE_TYPE" = "store" ]; then
  DOCKER_RUN_ARGS+=( -v "$KEY_FILE_HOST":/app/keys/blissworld-firebase-key.json:ro )

  # [ADD] store ÌÉÄÏûÖÏùº ÎïåÎßå www/{APP_NAME} ‚Üí /app/www ÎßàÏö¥Ìä∏ (ÏùΩÍ∏∞Ï†ÑÏö© Í∂åÏû•)
  DOCKER_RUN_ARGS+=( -v "$WWW_DIR_HOST":/app/www:ro )
  echo "[INFO] Static mount: $WWW_DIR_HOST -> /app/www (ro)" | tee -a "$LOG_FILE"
fi

docker run "${DOCKER_RUN_ARGS[@]}" "$APP_NAME-app" >> "$LOG_FILE" 2>&1
RUN_STATUS=$?

if [ $RUN_STATUS -eq 0 ]; then
  echo "[$DATE] [SUCCESS] $APP_NAME running on port $PORT" | tee -a "$LOG_FILE"
else
  echo "[$DATE] [ERROR] Failed to run $APP_NAME container" | tee -a "$LOG_FILE"
  exit 1
fi

#-----------------------------
# Health Check
#-----------------------------
if $IN_DOCKER; then
  HEALTH_CHECK_URL="http://$APP_NAME:8080/actuator/health"
else
  HEALTH_CHECK_URL="http://localhost:$PORT/actuator/health"
fi
echo "ü©∫ Health checking $HEALTH_CHECK_URL ..."
RETRY_COUNT=0
MAX_RETRIES=12

until [ "$(curl -s -o /dev/null -w '%{http_code}' "$HEALTH_CHECK_URL")" == "200" ]; do
  if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
    echo "‚ùå [$DATE] [ERROR] Health check failed for $APP_NAME after ${MAX_RETRIES} attempts." | tee -a "$LOG_FILE"
    # docker rm -f "$APP_NAME"  # ÌïÑÏöî Ïãú ÌôúÏÑ±Ìôî
    exit 1
  fi
  RETRY_COUNT=$((RETRY_COUNT + 1))
  echo "   - (Attempt ${RETRY_COUNT}/${MAX_RETRIES}) Waiting for application to be ready..."
  sleep 5
done

echo "‚úÖ [$DATE] [SUCCESS] Health check passed for $APP_NAME." | tee -a "$LOG_FILE"