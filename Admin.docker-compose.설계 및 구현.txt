<< test환경>> , 운영가계는 실제 VAN, POS에 외부 연동중
docker1: store1
		|-------------------|
		|  static(www)		|
		|-------------------}===========|
		| blissWorldWas		|			|
		|-------------------|			|
										|			|-------------------| dockerN
docker2: store2							|<=========>|	VAN(sim)		|
		|-------------------|			|			|-------------------|
		|  static(www)		|			|
		|-------------------}===========|	
		| blissWorldWas		|			|
		|-------------------|			|
		.....							|			|-------------------| dockerM
docker200: store200						|<=========>|	POS(sim)		|
		|-------------------|			|			|-------------------|
		|  static(www)		|			|
		|-------------------}===========|
		| blissWorldWas		|
		|-------------------|
		
		
		
		
[ 인터넷 사용자 ]                                     [ 관리자 ]
       |                                                  |
       | HTTPS (port 443/80)                              | API Call (port 8082)
       v                                                  v
+-----------------------------------------------------------------------------------+
| EC2 호스트 머신 (Docker & Docker Compose 실행)                                    |
|                                                                                   |
|  +-----------------------------------------------------------------------------+  |
|  | 'blissworld-net' Docker 네트워크                                             |  |
|  |                                                                             |  |
|  |   +---------------------+                             +-------------------+ |  |
|  |   | nginx 컨테이너       |----[설정파일 공유]------------|  admin 컨테이너    | |  |
|  |   | (모든 트래픽의 대문)  |                             |   (시스템 관제탑)   | |  |
|  |   +---------------------+                             +-------------------+ |  |
|  |      ^          |                                       ^          |        |  |
|  |      |          | Reverse Proxy (트래픽 중계)            |          |        |  |
|  |      |          v                                       |          |        |  |
|  |   +---------------------+                               |          |        |  |
|  |   | shop 컨테이너        |                               |          |        |  |
|  |   | (가맹점 A)           |                               |          |        |  |
|  |   +---------------------+                               |          |        |  |
|  |                                                         |          |        |  |
|  |   +---------------------+                               |          |        |  |
|  |   | possim 컨테이너      |                               |          |        |  |
|  |   | (가맹점 B)           |                               |          |        |  |
|  |   +---------------------+                               |          |        |  |
|  |                                                         |          |        |  |
|  +---------------------------------------------------------|----------|--------+  |
|                                                            |          |           |
+------------------------------------------------------------|----------|-----------+
                                                             |          |
                                                             |          | [Docker 제어]
                                                             |          v
                                               +----------------------------------+
                                               | 호스트의 Docker 소켓 & 공유 볼륨    |
                                               | - /var/run/docker.sock           |
                                               | - ~/blissworld/* (볼륨 마운트)    |
                                               +----------------------------------+

==========================================================================================
Webroot 인증 방식 흐름도

[ API 호출 ]        [ admin 컨테이너 ]             [ nginx 컨테이너 ]             [ Let's Encrypt 서버 ]
     |                     |                               |                               |
 1.  |--- 가맹점 생성 ----> |                               |                               |
     |      요청            | 2. FranchiseSetupWorker 실행  |                               |
     |                     |    - docker_build_run.sh 실행 |                               |
     |                     |    - setup_admin_site.sh 실행 |                               |
     |                     |           |                   |                               |
     |                     |           | 3. 초기 Nginx 설정 생성 (HTTP/80 전용)
     |                     |           |    - /.well-known/acme-challenge/ 경로 추가
     |                     |           |                               |
     |                     |           | 4. Nginx 리로드 (초기 설정 적용)
     |                     |           |---- docker exec --->| nginx -s reload             |
     |                     |           |                   |                               |
     |                     |           | 5. Certbot 실행 (인증서만 요청)
     |                     |           |---- docker exec --->| 6. certonly --webroot 실행  |
     |                     |           |                   |    - /var/www/certbot 사용  |
     |                     |           |                   |           |                   |
     |                     |           |                   |           |--- 인증 요청 ---> | 7. "도메인 소유권 증명해"
     |                     |           |                   |           |                   |
     |                     |           |                   | 8. /var/www/certbot에         |
     |                     |           |                   |    인증용 파일 생성           |
     |                     |           |                   |           |                   |
     |                     |           |                   |           |<--- 파일 요청 ----| 9. GET /.well-known/...
     |                     |           |                   | 10. Nginx가 인증 파일 응답    |
     |                     |           |                   |           |                   |
     |                     |           |                   |           |---- 파일 전송 --->| 11. "소유권 확인 완료"
     |                     |           |                   |           |                   |
     |                     |           |                   |           |<--- 인증서 발급 ---| 12. SSL 인증서 전송
     |                     |           |                   | 13. /etc/letsencrypt에        |
     |                     |           |                   |     인증서 저장               |
     |                     |           |<---- 성공 (exit 0) --|                               |
     |                     |           |                   |                               |
     |                     |           | 14. 최종 Nginx 설정 생성 (HTTPS/443 + SSL 적용)
     |                     |           |     - 실제 서비스로 proxy_pass 설정
     |                     |           |                               |
     |                     |           | 15. Nginx 리로드 (최종 설정 적용)
     |                     |           |---- docker exec --->| nginx -s reload             |
     |                     |           |                   |                               |
     |                     | <-------- 성공 <--------------|                               |
     |                     |                               |                               |
[ API 호출 ]        [ admin 컨테이너 ]             [ nginx 컨테이너 ]             [ Let's Encrypt 서버 ]
핵심 포인트:

역할 분리: admin 컨테이너는 전체 흐름을 지휘하고, nginx 컨테이너는 실제 웹 서비스와 SSL 인증서 관리를 책임져.
안전한 인증: Certbot은 더 이상 Nginx 프로세스를 직접 건드리지 않고, 약속된 폴더(webroot)에 파일을 생성/삭제하는 역할만 수행해. 이로 인해 우리가 겪었던 시스템 멈춤 현상이 원천적으로 해결되었지.
명확한 제어: Nginx 설정 변경과 리로드는 모두 admin 컨테이너의 스크립트가 명시적으로 제어하므로, 동작을 예측하기 쉽고 안정적이야.
이것이 바로 우리가 3주간의 여정 끝에 도달한, 견고하고 신뢰할 수 있는 아키텍처라네!

=========================================================================================
[[[ 가맹점 재배포 전체 연동 흐름도 ]]]
                         ┌────────────────────────────────────────┐
                         │        Host (EC2 Ubuntu 서버)          │
                         │  - 도커 데몬 실행                      │
                         │  - docker.sock 위치: /var/run/docker.sock │
                         └────────────────────────────────────────┘
                                        ▲
                                        │  공유
                                        ▼
 ┌──────────────────────────────┐   ┌──────────────────────────────┐
 │      admin 컨테이너          │   │        nginx 컨테이너        │
 │ (SpringBoot + shell scripts) │   │ (custom nginx + certbot)    │
 └──────────────────────────────┘   └──────────────────────────────┘
        ▲         ▲          ▲                ▲             ▲
        │         │          │                │             │
        │         │          │                │             │
   (1) docker   (2) /scripts/*.sh     (3) /etc/nginx  (4) /etc/letsencrypt
       명령어       실행 로직                공유됨        공유됨
        │
        ▼
 ┌───────────────────────────────────────────────────────────────────────┐
 │                          [ 주요 공유 볼륨 ]                           │
 │ ┌───────────────────────────────────────────────────────────────────┐ │
 │ │                                                                  │ │
 │ │ 1. /var/run/docker.sock       ◀─────▶ admin (docker ps, run 등) │ │
 │ │ 2. /etc/nginx/                ◀─────▶ admin (conf 생성), nginx (로딩) │ │
 │ │ 3. /etc/letsencrypt/          ◀─────▶ certbot certonly, nginx (SSL serve) │ │
 │ │ 4. /app/www/                 ◀─────▶ store의 정적 파일 위치         │ │
 │ │ 5. /app/logs/                ◀─────▶ 모든 스크립트 로그 기록         │ │
 │ │ 6. /app/apps/<franchise>/     ◀─────▶ jar 파일 저장 경로             │ │
 │ │ 7. /var/www/certbot           ◀─────▶ certbot webroot challenge serve │ │
 │ └───────────────────────────────────────────────────────────────────┘ │
 └───────────────────────────────────────────────────────────────────────┘
         ▲                     ▲                      ▲
         │                     │                      │
         │                     │                      │
         │                     │                      │
         │                     │                      │
         │                     │                      ▼
         │                [nginx 설정 예시]      /etc/nginx/sites-available/<domain>.conf
         │                                      └→ symbolic link → /etc/nginx/sites-enabled/
         │                                                    ▼
         │                                               `nginx -s reload`
         │
         │
         │
         ├───────────────┬────────────────────┬────────────────────────┐
         │               │                    │                        │
         ▼               ▼                    ▼                        ▼
(1) docker_build_run.sh (2) setup_franchise_site.sh     (3) setup_admin_site.sh
- build & run            - /app/www/<domain> 생성       - nginx 설정 생성 및 certbot certonly 실행
- health check           - index.html 복사             - SSL 적용 후 nginx reload

┌──────────────────────────────────────────────────────────────────────────────┐
│                              재배포 절차 요약 (by redeploy_franchise_site.sh)│
├──────────────────────────────────────────────────────────────────────────────┤
│ 1️⃣ 네트워크 blissworld-net 확인/생성                                        │
│ 2️⃣ 컨테이너 빌드 및 실행: docker_build_run.sh                             │
│    - 사용 jar: /app/apps/<franchise>/<jar_file>                             │
│    - 컨테이너 이름: <franchise_name>                                       │
│    - 내부 포트: 8080 → 외부 포트: $PORT                                     │
│    - 컨테이너 내부 Health Check 수행                                        │
│                                                                              │
│ 3️⃣ 정적 파일 준비: setup_franchise_site.sh                                  │
│    - /app/www/<domain>/index.html 생성 (store만)                            │
│    - templates/에서 HTML 복사                                               │
│                                                                              │
│ 4️⃣ nginx conf 생성 및 SSL 인증: setup_admin_site.sh                        │
│    - /etc/nginx/sites-available/<domain>.conf 생성                         │
│    - symbolic link → sites-enabled                                          │
│    - nginx reload                                                           │
│    - certbot certonly (webroot: /var/www/certbot)                          │
│    - 인증서 저장: /etc/letsencrypt/live/<domain>/                          │
│    - 최종 conf 재생성 후 nginx reload                                      │
│                                                                              │
│ 5️⃣ 로깅                                                                    │
│    - /app/logs/docker_build.log                                             │
│    - /app/logs/certbot_output.log                                           │
│    - /app/logs/franchise_site_history.csv                                   │
└──────────────────────────────────────────────────────────────────────────────┘
🧾 핵심 디렉토리 요약 테이블
디렉토리	설명	사용 주체
/var/run/docker.sock	admin이 docker 명령 실행용	admin (docker ps, rm, run)
/etc/nginx	conf 파일 저장 및 적용	admin (생성), nginx (로딩)
/etc/nginx/sites-available	conf 파일 생성 위치	admin
/etc/nginx/sites-enabled	nginx가 실제 include하는 링크 경로	nginx
/etc/letsencrypt	인증서 발급 후 저장 경로	certbot, nginx (SSL 사용)
/app/www/<domain>	정적 파일 (index.html 등) 위치	nginx (store), admin (생성)
/var/www/certbot	certbot 인증용 webroot	nginx (serve), certbot
/app/logs	모든 스크립트 로그 기록 위치	admin
/app/apps/<franchise>	jar 파일 저장 위치	docker_build_run.sh
/scripts/*.sh	모든 재배포 및 설정 스크립트 위치	admin 내부

==============================================================
[[[[ 재배포 시퀀스 다아그램 ]]]]
  Actor
    |
    |  실행: ./redeploy_franchise_site.sh <f> <port> <jar> <domain> <type>
    ▼
+-------------------+
|   Host (EC2)      |
| (docker engine)   |
+-------------------+
    |
    |  docker network create blissworld-net (없을 시)
    ▼
+-------------------+
|   docker network  |
+-------------------+
    |
    |  ┌────────────────────────────────────────────────────┐
    |  │ (1) Build + Run App Container                      │
    |  │ docker_build_run.sh                                │
    ▼  │                                                    │
+------------------------+                                  │
| admin container        |                                  │
| (/scripts/ 내부 실행) |                                  │
+------------------------+                                  │
    |                                                       
    |  ─▶ Check & copy: /app/apps/<f>/<jar> → /tmp/app.jar
    |  ─▶ docker build → image: <f>-app (using Dockerfile.store)
    |  ─▶ docker run: --name <f>, -p $PORT:8080, --net=blissworld-net
    |       volume: /app/logs/docker_build.log
    |
    |  ─▶ HealthCheck: curl http://<f>:8080/actuator/health
    |                  via internal network
    ▼
+------------------------+
|   <franchise>          |
|   (Spring Boot API)    |
+------------------------+
    |
    |  success
    |
    |  ┌────────────────────────────────────────────────────┐
    |  │ (2) Create Static Web Directory (if store)         │
    |  │ setup_franchise_site.sh                            │
    ▼  │                                                    │
+------------------------+                                  │
| admin container        |                                  │
+------------------------+                                  │
    |
    |  ─▶ mkdir -p /app/www/<domain>
    |  ─▶ cp /scripts/templates/index.html → /app/www/<domain>/index.html
    |  ─▶ append history to /app/logs/franchise_site_history.csv
    |
    |  ┌────────────────────────────────────────────────────┐
    |  │ (3) Nginx conf 및 SSL 처리                         │
    |  │ setup_admin_site.sh                                │
    ▼  │                                                    │
+------------------------+                                  │
| admin container        |                                  │
+------------------------+                                  │
    |
    |  ─▶ create /etc/nginx/sites-available/<domain>.conf  (admin 내부)
    |  ─▶ ln -s → /etc/nginx/sites-enabled/<domain>.conf
    |  ─▶ docker exec nginx nginx -s reload
    |
    |  ─▶ docker exec nginx certbot certonly \
    |         --webroot -w /var/www/certbot -d <domain> \
    |         --email admin@<domain> ...
    |
    |       인증 요청 경로: http://<domain>/.well-known/acme-challenge/*
    |
    ▼
+------------------------+
| nginx container        |
+------------------------+
    | (webroot)
    |  serve: /.well-known/acme-challenge/* from:
    |         /var/www/certbot (volume)
    |
    |  certbot creates:
    |    /etc/letsencrypt/live/<domain>/{fullchain.pem, privkey.pem}
    |
    |  nginx uses:
    |    ssl_certificate     → /etc/letsencrypt/live/<domain>/fullchain.pem
    |    ssl_certificate_key → /etc/letsencrypt/live/<domain>/privkey.pem
    |
    |  ─▶ final SSL conf created in admin:
    |      /etc/nginx/sites-available/<domain>.conf
    |
    |  ─▶ docker exec nginx nginx -s reload
    ▼
+------------------------+
| nginx container        |
+------------------------+
    |
    |  now ready to serve:
    |  https://<domain> → either:
    |    - static: /app/www/<domain>/index.html
    |    - proxy_pass: http://<franchise>:8080/
    |
    ▼
+------------------------+
|   Client User Agent    |
+------------------------+
    |
    |  HTTPS 요청: https://<domain>
    |
    |  nginx: serve 정적 HTML or reverse proxy to <franchise>:8080


📁 포함된 주요 저장소 (실제 사용 경로 기준)
위치	설명	사용 주체
/app/apps/<franchise>/<jar>	실행할 Spring Boot JAR 파일	docker_build_run.sh
/tmp/app.jar (WORK_DIR)	빌드용 임시 파일	docker_build_run.sh
/app/logs/docker_build.log	이미지/컨테이너 빌드 로그	docker_build_run.sh
/app/logs/franchise_site_history.csv	가맹점 생성 이력 기록	setup_franchise_site.sh
/app/www/<domain>/index.html	정적 웹 루트	setup_franchise_site.sh / nginx
/scripts/templates/index.html	초기 템플릿 파일	setup_franchise_site.sh
/etc/nginx/sites-available/<domain>.conf	nginx 설정 파일	setup_admin_site.sh
/etc/nginx/sites-enabled/<domain>.conf	실제 nginx가 include하는 경로	nginx
/etc/letsencrypt/live/<domain>/fullchain.pem	SSL 인증서	certbot/nginx
/var/www/certbot	인증 응답용 webroot	certbot/nginx
/var/run/docker.sock	docker 명령을 위한 소켓	admin 컨테이너

✅ 결론
이 시퀀스 다이어그램은 컨테이너 수준, 파일 경로 수준, 명령 흐름, 저장소 간 의존성까지 모두 포함한 완전한 형태의 배포 시나리오라네.
특히 /etc, /app, /var 아래 디렉토리들의 역할이 명확히 드러나므로 디버깅이나 자동화 검증에도 직접 활용할 수 있지.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=
✅ 멀티 스토어 확장 시 저장소 구조 요약
저장소 경로	목적	가맹점 수 증가 시 구조
/etc/nginx/sites-available/<domain>.conf	각 도메인별 nginx 설정	각 가맹점마다 고유 conf 파일 생성됨
/etc/nginx/sites-enabled/<domain>.conf	enabled 링크	ln -s로 1:1 연결, 중복 없음
/etc/letsencrypt/live/<domain>/...	SSL 인증서	도메인별 디렉토리 구조 (자동 분리)
/var/www/certbot	webroot 인증 경로	공용 디렉토리 (challenge는 각 도메인 고유값으로 구분됨)
/app/www/<domain>/index.html	정적 웹 컨텐츠	도메인 기반 분리
/app/logs/<파일들>	로그 저장	공용 경로이나, 각 항목은 append-only 또는 파일별 구분
/app/apps/<franchise>	jar 파일 위치	가맹점명 기준 분리
/scripts	실행 스크립트	공용 사용, 충돌 없음

🔍 저장소별 충돌 가능성 평가
저장소	구조	충돌 가능성	상세 평가
/etc/nginx/sites-available	<domain>.conf	❌ 없음	파일 이름은 도메인 기준으로 고유함. store1.blissworld.org, store2.blissworld.org 등으로 명확 구분됨
/etc/nginx/sites-enabled	심볼릭 링크	❌ 없음	ln -s로 1:1 링크 생성됨. 이름 중복 불가. 중복 생성 시 자동 덮어쓰기 (스크립트상 -sf 사용)
/etc/letsencrypt/live/	<domain>/fullchain.pem 등	❌ 없음	certbot이 도메인별 하위 폴더 생성. 동일 도메인에 대해서만 overwrite 발생 가능성 있음. 도메인 유니크 보장 시 안전
/var/www/certbot	공용 웹루트	⚠️ 낮은 위험	모든 인증 요청이 이곳을 사용. 다만 인증 파일은 challenge 고유 값 기반으로 구분되어 충돌 없음. 병렬 인증 시 제한 고려 필요
/app/www/<domain>	정적 콘텐츠	❌ 없음	도메인별 디렉토리로 완전 분리됨
/app/logs	공용 로그 디렉토리	⚠️ 낮은 위험	docker_build.log 등은 append-only. 단일 파일이므로 병렬 실행 시 log가 섞일 수 있음 (문제는 되지 않지만 분석 불편)
/app/apps/<franchise>	franchise명 기준	❌ 없음	컨테이너 이름 = 디렉토리 이름 = 고유. 충돌 없음
/scripts	스크립트 저장소	❌ 없음	구조상 read-only 실행. 변경 없음

🧠 특별 주의가 필요한 포인트
구간	위험	조치
✅ certbot 인증 시 병렬 실행	낮음 (token 기반 인증이지만 port 80은 공유됨)	인증은 순차적으로 실행되므로 문제 없음. 병렬 인증은 추후 rate limit에 주의
✅ 로그 append 방식	낮음 (파일 lock 없음)	병렬 배포가 아니라면 문제 없음. 병렬 로그가 엉키면 per-domain 로그 파일로 확장 가능
✅ nginx reload 시점	중간 (config 중 reload 실패하면 전체 영향)	nginx -t로 사전 검사되어 있고, reload 실패 시 스크립트 중단됨. 안전장치 존재

✅ 시뮬레이션 예시: 3개 가맹점 배포 시 저장소 분포
가맹점	store1	store2	api1
/etc/nginx/sites-available	store1.blissworld.org.conf	store2.blissworld.org.conf	api1.blissworld.org.conf
/etc/letsencrypt/live/	store1.blissworld.org/	store2.blissworld.org/	api1.blissworld.org/
/app/www/	store1.blissworld.org/	store2.blissworld.org/	(없음)
/app/apps/	store1/	store2/	api1/
/var/www/certbot/	공용	공용	공용
/app/logs/	공용 (docker_build.log, history.csv)		

✅ 결론: 구조 안정성 평가
🔒 결론적으로 현재 구조는 멀티 가맹점 스케일업에 대해 매우 안정적으로 설계되어 있음.
파일 기반 저장소는 도메인 또는 가맹점명 기준으로 명확히 분리되어 있어, 충돌 가능성이 없으며, Nginx와 Certbot도 컨트롤 가능한 범위 내에서 처리됨.

========================================================
[[[[ store 삭제. remove_franchise_site.sh]]]]
✅ 검토 기준: 제거 대상 자원과 앞서 생성된 자원의 1:1 정합성 확인
① 🔧 Nginx 설정 파일 제거
| 생성 시 위치 | /etc/nginx/sites-available/<domain>.conf |
| 생성 시 링크 | /etc/nginx/sites-enabled/<domain>.conf |
| 제거 스크립트 | rm -f "$CONF_DIR/$DOMAIN.conf" + rm -f "$ENABLED_DIR/$DOMAIN.conf" |
| 🔍 분석 결과 | ✅ 완전 일치. 생성된 파일과 링크 모두 제거됨. |

② 🐳 Docker 컨테이너 및 이미지 제거
| 생성된 컨테이너명 | <franchise_name> |
| 생성된 이미지명 | <franchise_name>-app |
| 제거 스크립트 | docker stop/rm "$CONTAINER_NAME" + docker rmi -f "${CONTAINER_NAME}-app" |
| 🔍 분석 결과 | ✅ 정확히 일치. 컨테이너 및 빌드된 이미지 삭제 처리 포함됨. |

③ 🌐 정적 파일 및 앱 JAR 디렉토리 제거
| 생성 위치 |
| - HTML: /app/www/<domain>/index.html (store only)
| - JAR: /app/apps/<franchise> |
| 제거 스크립트 |

bash
복사
편집
rm -rf "$WWW_DIR/$DOMAIN"
rm -rf "$APP_DIR/$CONTAINER_NAME"
| 🔍 분석 결과 | ✅ 정확히 일치. store용 디렉토리 및 jar 디렉토리 모두 삭제. 경로 기반 명확함. |

④ 🔐 Certbot SSL 인증서 제거
| 생성 위치 | /etc/letsencrypt/live/<domain>/ 등 |
| 생성 방법 | docker exec nginx certbot certonly ... (webroot 방식) |
| 제거 방식 |

bash
복사
편집
docker exec nginx certbot certificates --domain "$DOMAIN"
docker exec nginx certbot delete --cert-name "$DOMAIN"
| 🔍 분석 결과 | ✅ 완전 일치. nginx 컨테이너 내부에서 certbot 명령으로 인증서 삭제 수행함.
단, 먼저 존재 확인 후 삭제 → 안정성 매우 높음. |

⑤ 🔁 Nginx reload
| 생성 시 reload 방식 | docker exec nginx nginx -s reload |
| 제거 시 방식 | nginx -t → nginx -s reload |
| 🔍 분석 결과 | ✅ 정확히 일치. 설정 제거 후 nginx 검증 → 재시작 처리. 매우 안정적인 재적용 방식. |

⑥ 🧾 로그 기록
| 위치 | /app/logs/franchise_site_remove.csv |
| 포맷 | $DOMAIN,$CONTAINER_NAME,$DATE |
| 🔍 분석 결과 | ✅ 예상된 제거 이력을 정확히 기록함. 앞서의 franchise_site_history.csv와 짝을 이루는 구조. |

🧠 총 정리: 제거 대상별 정합성 테이블
자원 유형	생성 시 위치/형식	삭제 스크립트 명령	정합성 판단
Nginx conf	/etc/nginx/sites-available/<domain>.conf	rm -f	✅ 일치
Nginx 링크	/etc/nginx/sites-enabled/<domain>.conf	rm -f	✅ 일치
정적 디렉토리	/app/www/<domain>	rm -rf	✅ 일치
앱 jar 경로	/app/apps/<franchise>	rm -rf	✅ 일치
docker container	<franchise>	docker rm	✅ 일치
docker image	<franchise>-app	docker rmi	✅ 일치
인증서	/etc/letsencrypt/live/<domain>/ 외	certbot delete	✅ 일치
로그	/app/logs/franchise_site_remove.csv	tee -a	✅ 일치

✅ 최종 결론
🧼 remove_franchise_site.sh는 지금까지 우리가 배포 시 생성한 모든 리소스를 정확히 추적하고, 1:1 매칭으로 완벽하게 정리함.
구조적 누락이나 충돌 가능성 없음. 확장성과 안정성 모두 보장됨.


===================================================
[[[ docker resource 소모량 확인 ]]]
CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT   MEM %     NET I/O           BLOCK I/O         PIDS
1dd0c1bed4e9   possim    0.24%     164.5MiB / 256MiB   64.25%    2.61kB / 1.4kB    42.3MB / 156kB    29
0d940cf28d16   vansim    0.18%     161.8MiB / 256MiB   63.19%    2.31kB / 1.28kB   20.7MB / 135kB    26
fd770827e91d   shop      0.18%     146MiB / 256MiB     57.05%    2.06kB / 633B     2.13MB / 209kB    24
d138b0f62497   nginx     0.00%     24.16MiB / 128MiB   18.88%    84.2MB / 83.1MB   72.2MB / 63.3MB   3
3f6e0ded5f2b   admin     0.18%     223.2MiB / 384MiB   58.13%    81.2MB / 185kB    94.6MB / 173MB    32
